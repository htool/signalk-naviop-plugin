diff --git a/lib/canbus.js b/lib/canbus.js
index 00346fa..b13eea2 100644
--- a/lib/canbus.js
+++ b/lib/canbus.js
@@ -170,7 +170,7 @@ CanbusStream.prototype.start = function () {
 CanbusStream.prototype.sendPGN = function (msg) {
   if ( this.candevice ) {
     if ( !this.candevice.cansend && (_.isString(msg) || msg.pgn !== 59904) ) {
-      //we have not completed address claim yet
+      debug('We we have not completed address claim yet.')
       return
     }
 
diff --git a/lib/candevice.js b/lib/candevice.js
index 273a01a..8fe5c99 100644
--- a/lib/candevice.js
+++ b/lib/candevice.js
@@ -18,34 +18,31 @@ const debug = require('debug')('canboatjs:candevice')
 const EventEmitter = require('events')
 const _ = require('lodash')
 const Uint64LE = require('int64-buffer').Uint64LE
-const { defaultTransmitPGNs, getIndustryCode, getManufacturerCode, getDeviceClassCode } = require('./codes')
+const { getIndustryCode, getManufacturerCode, getDeviceClassCode } = require('./codes')
 const { toPgn } = require('./toPgn')
 
-const addressClaim = {
-  pgn: 60928,
-  dst: 255,
-  "Unique Number": 1263,
-  "Manufacturer Code": 999,
-  "Device Function": 130,      // PC gateway
-  "Device Class": 25,          // Inter/Intranetwork Device
-  "Device Instance Lower": 0,
-  "Device Instance Upper": 0,
-  "System Instance": 0,
-  "Industry Group": 4,          // Marine
-  "Reserved1": 1,
-  "Reserved2": 2
-}
+const defaultTransmitPGNs = require ('../../index.js').defaultTransmitPGNs
+debug ('Candevice loaded PGNs (defaultTransmitPGNs): %j', defaultTransmitPGNs)
+var transmitPGNs = defaultTransmitPGNs
+
+const deviceAddress = require ('../../index.js').deviceAddress
+const addressClaim = require ('../../index.js').addressClaim
+const productInfo = require ('../../index.js').productInfo
 
 class CanDevice extends EventEmitter {
   constructor (canbus, options) {
     super()
 
-    addressClaim["Unique Number"] = Math.floor(Math.random() * Math.floor(2097151));
+    // If not defined, generate random one
+    if (!'Unique Number' in addressClaim) {
+      addressClaim["Unique Number"] = Math.floor(Math.random() * Math.floor(2097151));
+    }
+    
 
     this.canbus = canbus
     this.options = _.isUndefined(options) ? {} : options
 
-    this.address = _.isUndefined(options.preferredAddress) ? 100 : options.preferredAddress
+    this.address = _.isUndefined(options.preferredAddress) ? deviceAddress : options.preferredAddress
     this.cansend = false
     this.foundConflict = false
     this.devices = {}
@@ -62,7 +59,7 @@ class CanDevice extends EventEmitter {
   }
 
   start() {
-    sendISORequest(this, 60928, 254)
+    sendISORequest(this, 60928, 255)
     setTimeout(() => {
       sendAddressClaim(this)
     }, 1000)
@@ -98,10 +95,14 @@ class CanDevice extends EventEmitter {
   }
 }
 
-function sendPGN(device, pgn, src, dest) {
-  pgn.src = src || device.address
-  debug('Sending PGN %j', pgn)
-  device.canbus.sendPGN(pgn)
+function sendPGN(device, pgn) {
+  if (typeof src != 'undefined') {
+    pgn.src = src
+  } else {
+    pgn.src = device.address
+  }
+  debug('Sending PGN %j', pgn);
+  device.canbus.sendPGN(pgn);
 }
 
 function handleISORequest(device, n2kMsg) {
@@ -110,7 +111,8 @@ function handleISORequest(device, n2kMsg) {
   switch (n2kMsg.fields.PGN) {
   case 126996:  // Product Information request
     sendProductInformation(device)
-    break;
+    // sendPGNList(device, n2kMsg.src)
+  break;
   case 60928:   // ISO address claim request
     //sendAddressClaim(device)
     let ac = JSON.parse(JSON.stringify(addressClaim))
@@ -118,7 +120,10 @@ function handleISORequest(device, n2kMsg) {
     sendPGN(device, ac)
     break;
   case 126464:
-    sendPGNList(device)
+    sendPGNList(device, n2kMsg.src)
+    break;
+  case 126998:
+    sendPGNList(device, n2kMsg.src)
     break;
   default:
     debug(`Got unsupported ISO request for PGN ${n2kMsg.fields.PGN}. Sending NAK.`)
@@ -252,20 +257,7 @@ function sendISORequest(device, pgn, src, dst=255) {
 
 function sendProductInformation(device) {
   debug("Sending product info..")
-
-  const productInfo = {
-    pgn: 126996,
-    dst: 255,
-    "NMEA 2000 Version": 1300,
-    "Product Code": 667,   // Just made up..
-    "Model ID": "Signal K",
-    "Software Version Code": "1.0",
-    "Model Version": "canbusjs",
-    "Model Serial Code": "123456",
-    "Certification Level": 0,
-    "Load Equivalency": 1
-  }
-  sendPGN(device, productInfo)
+	sendPGN(device, productInfo)
 }
 
 function sendNAKAcknowledgement(device, src, requestedPGN) {
@@ -286,8 +278,9 @@ function sendPGNList(device, src) {
     pgn: 126464,
     dst: src,
     "Function Code": 0,
-    list: device.transmitPGNs
+    list: transmitPGNs
   }
+  debug('SendPGNList: %j', pgnList)
   sendPGN(device, pgnList)
 }
 
@@ -296,3 +289,4 @@ function getISOAddressClaimAsUint64(pgn) {
 }
 
 module.exports = CanDevice
+module.exports.sendPGNList = sendPGNList
diff --git a/lib/codes.js b/lib/codes.js
index ab7fbec..82f3b3a 100644
--- a/lib/codes.js
+++ b/lib/codes.js
@@ -34,27 +34,6 @@ const deviceClassNames = invert(deviceClassCodes)
 const industryNames = invert(industryCodes)
 industryNames['Marine'] = 4
 
-const defaultTransmitPGNs = [
-  60928,
-  59904,
-  126996,
-  126464,
-  128267,
-  129794,
-  129038,
-  129041,
-  127505,
-  127506,
-  127508,
-  129026,
-  129025,
-  129029,
-  127250,
-  130306,
-  126720,
-  127489,
-  127488
-]
 
 const manufacturerCodes = invert(manufacturerNames)
 module.exports.manufacturerCodes = manufacturerCodes
@@ -64,4 +43,3 @@ module.exports.getIndustryCode = propertyOf(industryNames)
 module.exports.getManufacturerCode = propertyOf(manufacturerNames)
 module.exports.getDeviceClassCode = propertyOf(deviceClassNames)
 module.exports.getDeviceClassName = propertyOf(deviceClassCodes)
-module.exports.defaultTransmitPGNs = defaultTransmitPGNs
diff --git a/lib/utilities.js b/lib/utilities.js
index 4f97f45..bd24788 100644
--- a/lib/utilities.js
+++ b/lib/utilities.js
@@ -33,8 +33,8 @@ function getPlainPGNs(buffer) {
     var end = index+7
     var fill = 0
     if ( end > buffer.length ) {
-      fill = end - buffer.length
-      end = buffer.length
+      fill = end - buffer.length 
+      end = buffer.length + 1
     }
     buffer.copy(next, 1, index, end)
     if ( fill > 0 ) {
